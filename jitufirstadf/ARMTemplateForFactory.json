{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "jitufirstadf"
		},
		"linkedservices_jitustorageaccount001_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'linkedservices_jitustorageaccount001'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/audit')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "logfile",
							"value": {
								"value": "@concat(formatDateTime(utcNow(),'yyyy-mm-dd'),'_log.csv')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Df_append",
								"type": "DatasetReference",
								"parameters": {
									"logfilename": {
										"value": "@variables('logfile')",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('Get Metadata1').output.exists",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "df_logdetail",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "df_logdetail",
											"type": "DataFlowReference",
											"parameters": {
												"AdfName": {
													"value": "'@{pipeline().DataFactory}'",
													"type": "Expression"
												},
												"PipelineName": {
													"value": "'@{pipeline().Pipeline}'",
													"type": "Expression"
												},
												"Status": {
													"value": "'@{string('fail')}'",
													"type": "Expression"
												},
												"Runid": {
													"value": "'@{pipeline().RunId}'",
													"type": "Expression"
												},
												"TriggerName": {
													"value": "'@{pipeline().TriggerName}'",
													"type": "Expression"
												},
												"logfilename": {
													"value": "'@{variables('logfile')}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"dummy": {},
												"sink1": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "df_logdetail_append",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "df_logdetail_append",
											"type": "DataFlowReference",
											"parameters": {
												"AdfName": {
													"value": "'@{pipeline().DataFactory}'",
													"type": "Expression"
												},
												"PipelineName": {
													"value": "'@{pipeline().Pipeline}'",
													"type": "Expression"
												},
												"Status": {
													"value": "'@{string('success')}'",
													"type": "Expression"
												},
												"Runid": {
													"value": "'@{pipeline().RunId}'",
													"type": "Expression"
												},
												"TriggerName": {
													"value": "'@{pipeline().TriggerName}'",
													"type": "Expression"
												},
												"logfilename": {
													"value": "'@{variables('logfile')}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"dummy": {},
												"log": {
													"logfilename": {
														"value": "@variables('logfile')",
														"type": "Expression"
													}
												},
												"sink1": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"logfile": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-01-25T17:37:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Df_append')]",
				"[concat(variables('factoryId'), '/dataflows/df_logdetail')]",
				"[concat(variables('factoryId'), '/dataflows/df_logdetail_append')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Df_append')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedservices_jitustorageaccount001",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"logfilename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().logfilename",
							"type": "Expression"
						},
						"folderPath": "log",
						"container": "jitucontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedservices_jitustorageaccount001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Ds_log')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedservices_jitustorageaccount001",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "log",
						"container": "jitucontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedservices_jitustorageaccount001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_dummy')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedservices_jitustorageaccount001",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "dummy.txt",
						"folderPath": "input",
						"container": "jitucontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedservices_jitustorageaccount001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/linkedservices_jitustorageaccount001')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('linkedservices_jitustorageaccount001_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_logdetail')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "df_dummy",
								"type": "DatasetReference"
							},
							"name": "dummy"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Ds_log",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     AdfName as string,",
						"     PipelineName as string,",
						"     Status as string,",
						"     Runid as string,",
						"     TriggerName as string,",
						"     logfilename as string",
						"}",
						"source(output(",
						"          Column_1 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> dummy",
						"dummy derive(ADFname = $AdfName,",
						"          Pipelinename = $PipelineName,",
						"          Status = $Status,",
						"          RunId = $Runid,",
						"          TriggerName = $TriggerName) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          ADFname,",
						"          Pipelinename,",
						"          Status,",
						"          RunId,",
						"          TriggerName",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:[($logfilename)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/df_dummy')]",
				"[concat(variables('factoryId'), '/datasets/Ds_log')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_logdetail_append')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "df_dummy",
								"type": "DatasetReference"
							},
							"name": "dummy"
						},
						{
							"dataset": {
								"referenceName": "Df_append",
								"type": "DatasetReference"
							},
							"name": "log"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Ds_log",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						},
						{
							"name": "union1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     AdfName as string,",
						"     PipelineName as string,",
						"     Status as string,",
						"     Runid as string,",
						"     TriggerName as string,",
						"     logfilename as string",
						"}",
						"source(output(",
						"          Column_1 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> dummy",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     wildcardPaths:[('log/'+$logfilename)]) ~> log",
						"dummy derive(ADFname = $AdfName,",
						"          Pipelinename = $PipelineName,",
						"          Status = $Status,",
						"          RunId = $Runid,",
						"          TriggerName = $TriggerName) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          ADFname,",
						"          Pipelinename,",
						"          Status,",
						"          RunId,",
						"          TriggerName",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1, log union(byName: true)~> union1",
						"union1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:[($logfilename)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/df_dummy')]",
				"[concat(variables('factoryId'), '/datasets/Df_append')]",
				"[concat(variables('factoryId'), '/datasets/Ds_log')]"
			]
		}
	]
}